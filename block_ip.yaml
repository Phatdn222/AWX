---
- name: Advanced IP Blocker for AWX Container
  hosts: all
  become: yes
  vars:
    malicious_ip: "{{ malicious_ip }}"
    
  tasks:
    - name: Detect execution environment
      ansible.builtin.set_fact:
        is_container: "{{ 'AWX_CONTAINER_HOST' in ansible_facts.env }}"
        iptables_path: "/usr/sbin/iptables"
        
    - name: Block IP on Host
      ansible.builtin.raw: |
        {{ iptables_path }} -I INPUT -s {{ malicious_ip }} -j DROP
        {{ iptables_path }} -I DOCKER-USER -s {{ malicious_ip }} -j DROP
        {{ iptables_path }}-save > /etc/iptables/rules.v4
      when: not is_container|bool
      register: host_result
      changed_when: host_result.rc == 0

    - name: Block IP from Container
      ansible.builtin.shell: |
        nsenter --target 1 --net -- {{ iptables_path }} -I INPUT -s {{ malicious_ip }} -j DROP
        nsenter --target 1 --net -- {{ iptables_path }} -I DOCKER-USER -s {{ malicious_ip }} -j DROP
        nsenter --target 1 --net -- {{ iptables_path }}-save > /etc/iptables/rules.v4
      args:
        executable: /bin/bash
      when: is_container|bool
      register: container_result
      changed_when: container_result.rc == 0
      environment:
        PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

    - name: Ensure iptables persistence (Debian/Ubuntu)
      ansible.builtin.apt:
        name: iptables-persistent
        state: present
      when: 
        - ansible_facts.os_family == 'Debian'
        - not is_container|bool

    - name: Ensure iptables persistence (RHEL/CentOS)
      ansible.builtin.yum:
        name: iptables-services
        state: present
      when: 
        - ansible_facts.os_family == 'RedHat'
        - not is_container|bool

  handlers:
    - name: restart iptables service
      ansible.builtin.service:
        name: "{{ 'netfilter-persistent' if ansible_facts.os_family == 'Debian' else 'iptables' }}"
        state: restarted
      when: not is_container|bool
